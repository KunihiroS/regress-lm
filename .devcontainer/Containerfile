# Use the official Debian slim image as a base
FROM debian:bookworm-slim

# Avoid prompts from apt during installation
ENV DEBIAN_FRONTEND=noninteractive

# Install essential packages and additional CLI tools for enhanced productivity.
# - sudo: To allow the non-root user (vscode) to perform administrative tasks.
# - git: For version control.
# - curl, gnupg, ca-certificates: For downloading files and managing apt repositories securely.
# - ripgrep, fzf, bat: Modern replacements for standard unix tools.
# - micro: A modern and intuitive terminal-based text editor.
# - lazygit: A simple terminal UI for git commands.
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get -y install --no-install-recommends \
    podman \
    uidmap \
    sudo \
    git \
    curl \
    gnupg \
    ca-certificates \
    python3-pip \
    python3-venv \
    ripgrep \
    fzf \
    bat \
    jq \
    btop \
    fd-find \
    zoxide \
    tree \
    # Keep PODMAN_HOST environment variable when using sudo by adding a sudoers drop-in file.

    # On Debian, bat is installed as batcat, so we create a symlink for convenience
    && ln -s /usr/bin/batcat /usr/local/bin/bat || true \
    # On Debian, fd is installed as fd-find, so we create a symlink for convenience
    && ln -s /usr/bin/fdfind /usr/local/bin/fd || true \
    # Install micro editor using its official script
    && (curl https://getmic.ro | bash && mv micro /usr/local/bin) \
    # Install the latest version of lazygit
    && ( \
        LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*') \
        && curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz" \
        && tar xf lazygit.tar.gz lazygit \
        && install lazygit /usr/local/bin \
        && rm lazygit.tar.gz \
    ) \
    # Clean up apt cache at the end
    && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/*

# Install pipx using the system-installed pip. pipx is used to install Python applications in isolated environments.
# Then, use pipx to install uv into a global bin directory so all users can access it.
RUN pip install --break-system-packages pipx \
 && PIPX_HOME=/opt/pipx PIPX_BIN_DIR=/usr/local/bin pipx install uv

# The rest of the setup (user creation, tool installation like Node.js) is handled
# by the features and commands in devcontainer.json.
# Switch to the non-root user 'vscode' which is created by the common-utils feature.
USER vscode